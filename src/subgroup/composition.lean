import subgroup.torsion

open_locale classical

namespace mygroup

open mygroup mygroup.subgroup mygroup.quotient group_hom function set

/-- A group is nontrivial if and only if it top is not equal to its bot -/
def group.nontrivial (G : Type) [group G] : Prop := (‚ä• : subgroup G) ‚â† ‚ä§ 

@[simp] lemma group.nontrivial_def {G : Type} [group G] :
  group.nontrivial G ‚Üî (‚ä• : subgroup G) ‚â† ‚ä§ := iff.rfl

-- Some lemmas about pushing top and bot over isomorphisms
lemma subgroup.map_bot_eq_bot {G H : Type} [group G] [group H] 
  (œÜ : G ‚Üí* H) : subgroup.map œÜ (‚ä• : subgroup G) = (‚ä• : subgroup H) := 
begin
  ext, rw [mem_map, mem_bot_iff],
  split, 
    { rintro ‚ü®_, hx, rfl‚ü©,
      rw mem_bot_iff at hx,
      subst hx,
      exact map_one _ },
    { rintro rfl,
      exact ‚ü®1, mem_bot_iff.2 rfl, map_one _‚ü© }
end

/-- Everything is a member of top -/
lemma subgroup.mem_top {G : Type} [group G] (g : G) : g ‚àà (‚ä§ : subgroup G) :=
begin
  change g ‚àà ((‚ä§ : subgroup G) : set G),
  rw ‚Üê singleton_subset_iff,
  change {g} ‚â§ ((‚ä§ : subgroup G) : set G),
  rw ‚Üê subgroup.closure_le, simp,
end

lemma subgroup.map_top_eq_top {G H : Type} [group G] [group H] 
  (œÜ : G ‚Üí* H) (hœÜ : surjective œÜ) : 
  subgroup.map œÜ (‚ä§ : subgroup G) = (‚ä§ : subgroup H) := 
begin
  ext, split; intro,
    { exact subgroup.mem_top _ },
    { rw mem_map,
      rcases hœÜ x with ‚ü®x, rfl‚ü©,
      refine ‚ü®x, subgroup.mem_top _, rfl‚ü© }
end

/-- Nontrivial is a group property, that is it translates over group isomorphisms -/
lemma subgroup.nontrivial_of_iso_nontrivial {G H : Type} [group G] [group H] 
  (œÜ : G ‚âÖ H) : group.nontrivial G ‚Üí group.nontrivial H :=
begin
  intros hG h,
  apply hG, 
  rw [‚Üê subgroup.map_top_eq_top (iso_symm œÜ).1 (iso_symm œÜ).2.2,
      ‚Üê subgroup.map_bot_eq_bot (iso_symm œÜ).1, h],
end

/-- Everything is in top -/
lemma normal.mem_top {G : Type} [group G] (g : G) : g ‚àà (‚ä§ : normal G) :=
begin
  rw [‚Üê normal.mem_carrier, ‚Üê singleton_subset_iff],
  change {g} ‚â§ ((‚ä§ : normal G) : set G),
  rw ‚Üê normal.closure_le, simp,
end

namespace composition

variables {G : Type} [group G]

-- def subgroup.le_hom {A B : subgroup G} (hAB : A ‚â§ B) : A ‚Üí* B :=
--   monoid_hom.mk' (Œª a, ‚ü®a.1, hAB a.2‚ü©) (Œª _ _, rfl)

-- def subgroup.normal_pair {A B : subgroup G} (hAB : A ‚â§ B) : Prop :=
--   (monoid_hom.range (subgroup.le_hom hAB)).normal

-- @[simp] lemma subgroup.normal_pair_def {A B : subgroup G} (hAB : A ‚â§ B) :
--   subgroup.normal_pair hAB ‚Üî (monoid_hom.range (subgroup.le_hom hAB)).normal := iff.rfl

-- def subgroup.normal_pair' (A B : subgroup G): Prop :=
--   (monoid_hom.range (subgroup.le_hom (show A ‚äì B ‚â§ B, by exact inf_le_right))).normal

variables (H : subgroup G) (N : normal G)

/-- A group is simple if and only if it is nontrivial and all its normal subgroups 
  are either top or bot -/
def is_simple (G : Type) [group G] :=
  group.nontrivial G ‚àß ‚àÄ N : normal G, N = ‚ä• ‚à® N = ‚ä§

@[simp] lemma is_simple_def (G : Type) [group G] : is_simple G ‚Üî 
  group.nontrivial G ‚àß ‚àÄ N : normal G, N = ‚ä• ‚à® N = ‚ä§ := iff.rfl

lemma comap_eq_bot {G H : Type} [group G] [group H] {œÜ : G ‚Üí* H} {N : normal H}
  (h : normal.comap œÜ N = (‚ä• : normal G)) (hsur : surjective œÜ) : N = ‚ä• :=
begin
  rw eq_bot_iff at h ‚ä¢,
  intros n hn, erw normal.mem_carrier at hn ‚ä¢,
  rcases hsur n with ‚ü®x, rfl‚ü©,
  rw ‚Üê normal.mem_comap at hn,
  rw [normal.mem_bot_iff.1 (h hn), map_one],
  exact (‚ä• : normal H).one_mem'
end

lemma comap_eq_top {G H : Type} [group G] [group H] {œÜ : G ‚Üí* H} {N : normal H}
  (h : normal.comap œÜ N = (‚ä§ : normal G)) (hsur : surjective œÜ) : N = ‚ä§ :=
begin
  rw eq_top_iff at h ‚ä¢,
  intros n _, erw normal.mem_carrier,
  rcases hsur n with ‚ü®x, rfl‚ü©,
  exact(normal.mem_comap _).1 (h (normal.mem_top x))
end

/-- `is_simple` is a group property, that is, it translates over group 
  isomorphisms -/
lemma is_simple_of_iso {G H : Type} [group G] [group H] 
  (œÜ : G ‚âÖ H) : is_simple G ‚Üí is_simple H :=
begin
  refine Œª hG, ‚ü®subgroup.nontrivial_of_iso_nontrivial œÜ hG.1, _‚ü©,
  intro N, rcases hG.2 (normal.comap œÜ.1 N) with hN | hN,
    { left, exact comap_eq_bot hN œÜ.2.2 },
    { right, exact comap_eq_top hN œÜ.2.2 }
end

/-- A normal subgroup is maximal if and only if the quotient group by it is 
  simple -/
def is_maximal {N : normal G} (hN : N ‚â† ‚ä§) : Prop := is_simple (G /‚Çò N)

@[simp] lemma is_maximal_def {N : normal G} (hN : N ‚â† ‚ä§) : 
  is_maximal hN ‚Üî is_simple (G /‚Çò N) := iff.rfl

-- If N < M, then by the correspondence theorem, there is a proper normal 
-- subgroup in G / N which contradicts the is_simple hypothesis

/-- There is no proper subgroup containing a maximal subgroup -/
theorem maximal_is_max {N : normal G} (hproper : N ‚â† ‚ä§) (h : is_maximal hproper) : 
  ‚àÄ M : normal G, N < M ‚Üí M = ‚ä§ :=
begin
  intros M hM,
  rw [is_maximal_def, is_simple_def] at h,
  rcases h with ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©,
  cases h‚ÇÇ ((normal_of_quotient_order_iso N).to_equiv ‚ü®M, le_of_lt hM‚ü©),
    { exfalso, refine not_le_of_lt hM _,
      change (‚ü®M, le_of_lt hM‚ü© : { H // N ‚â§ H }) ‚â§ ‚ü®N, le_refl _‚ü©, 
      rw [(normal_of_quotient_order_iso N).ord', h],
      exact bot_le },
    { rw eq_top_iff,
      change (‚ü®‚ä§, le_top‚ü© : { H // N ‚â§ H }) ‚â§ ‚ü®M, le_of_lt hM‚ü©, 
      rw [(normal_of_quotient_order_iso N).ord', h],
      exact le_top }
end

/-- An alternative version of `maximal_is_max` that requires `‚â§` instead of `<` -/
theorem maximal_is_max' {N : normal G} (hproper : N ‚â† ‚ä§) (h : is_maximal hproper) : 
  ‚àÄ M : normal G, N ‚â§ M ‚Üí M = N ‚à® M = ‚ä§ := 
begin
  intros M hM,
  rcases le_iff_lt_or_eq.1 hM with hlt | rfl,
    { exact or.inr (maximal_is_max hproper h _ hlt) },
    { exact or.inl rfl }
end

def is_conj_mem (A B : subgroup G) : Prop := ‚àÄ a ‚àà A, ‚àÄ g ‚àà B, g * a * g‚Åª¬π ‚àà A

@[simp] lemma is_conj_mem_def (A B : subgroup G) :
  is_conj_mem A B ‚Üî ‚àÄ a ‚àà A, ‚àÄ g ‚àà B, g * a * g‚Åª¬π ‚àà A := iff.rfl

def normal.ùíæ {G : Type} [group G] {A B : subgroup G} (hle : A ‚â§ B) 
  (h : is_conj_mem A B) : normal B :=
{ carrier := { a | a.1 ‚àà A },
  one_mem' := A.one_mem',
  mul_mem' := Œª _ _ ha hb, A.mul_mem' ha hb,
  inv_mem' := Œª _ h, A.inv_mem' h,
  conj_mem' := Œª _ hs x, h _ hs _ x.2 }

lemma normal.mem_ùíæ {G : Type} [group G] {A B : subgroup G} (hle : A ‚â§ B) 
  (h : is_conj_mem A B) {g : G} (hg : g ‚àà B) : 
  (‚ü®g, hg‚ü© : B) ‚àà normal.ùíæ hle h ‚Üî g ‚àà A := iff.rfl

lemma normal.inclusion_inv {G : Type} [group G] {A B : subgroup G} (hle : A ‚â§ B) 
  {g : G} (hg : g ‚àà B) : (‚ü®g, hg‚ü©‚Åª¬π : B) = ‚ü®g‚Åª¬π, B.inv_mem' hg‚ü© := rfl

lemma normal.inclusion_mul {G : Type} [group G] {A B : subgroup G} (hle : A ‚â§ B) 
  {g h : G} (hg : g ‚àà B) (hh : h ‚àà B) : 
  (‚ü®g, hg‚ü© : B) * (‚ü®h, hh‚ü© : B) = ‚ü®g * h, B.mul_mem' hg hh‚ü© := rfl

attribute [simp] normal.mem_ùíæ normal.inclusion_inv normal.inclusion_mul

-- `chain_prop A B` means `‚àÄ a ‚àà A, g ‚àà B, g * a * g‚Åª¬π ‚àà A` 
def chain_prop (A B : subgroup G) : Prop := 
  ‚àÉ (hle : A ‚â§ B) (H : is_conj_mem A B), is_simple $ B /‚Çò (normal.ùíæ hle H)

@[simp] lemma chain_prop_def {A B : subgroup G} :
  chain_prop A B ‚Üî 
  ‚àÉ (hle : A ‚â§ B) (H : is_conj_mem A B), is_simple $ B /‚Çò (normal.ùíæ hle H) := iff.rfl

-- def chain_prop (A B : normal G) : Prop :=
--   ‚àÉ (hle : A ‚â§ B), is_simple $ B /‚Çò (normal.ùíæ hle)

-- @[simp] lemma chain_prop_def {A B : normal G} :
--   chain_prop A B ‚Üî 
--   ‚àÉ (hle : A ‚â§ B), is_simple $ B /‚Çò (normal.ùíæ hle) := iff.rfl

instance normal.inhabited : inhabited $ subgroup G := ‚ü® ‚ä• ‚ü©

/-- Chain is a nonempty list of subgroups such that subsequent subgroups 
  satisfies `chain_prop`, and furthermore, it begins with bot and ends with top -/
structure chain (G : Type) [group G] :=
(carrier    : list (subgroup G))
(nonempty   : carrier ‚â† list.nil)
(chain_prop : carrier.chain' chain_prop)
(chain_head : carrier.head = ‚ä•)
(chain_last : carrier.last nonempty = ‚ä§)

lemma is_conj_mem_bot : is_conj_mem H ‚ä• := Œª _ _ _ hg, by simpa [mem_bot_iff.1 hg]

lemma is_conj_mem_bot' : is_conj_mem ‚ä• H := Œª _ ha _ _,
  by simp [mem_bot_iff.1 ha, one_mem]

def to_top : G ‚Üí* (‚ä§ : subgroup G) := ‚ü®Œª g, ‚ü®g, subgroup.mem_top _‚ü©, by tidy‚ü©
def to_top_iso : G ‚âÖ (‚ä§ : subgroup G) := ‚ü®to_top, by tidy‚ü©

def top_div_bot_iso : 
  (‚ä§ : subgroup G) ‚âÖ (‚ä§ : subgroup G) /‚Çò (normal.ùíæ 
    (@le_top _ _ (‚ä• : subgroup G)) (is_conj_mem_bot' _)) := 
{ is_bijective := 
    begin
      refine ‚ü®_, by tidy‚ü©,
      rintros ‚ü®x‚ÇÅ, _‚ü© ‚ü®x‚ÇÇ, _‚ü© hx, dsimp at hx,
      rw [‚Üê coe_eq_mk, ‚Üê coe_eq_mk, mk_eq'] at hx,
      rw @normal.inclusion_inv _ _ (‚ä• : subgroup G) _ bot_le at hx,
      erw @normal.inclusion_mul _ _ (‚ä• : subgroup G) _ bot_le at hx,
      erw [normal.mem_ùíæ, mem_bot_iff] at hx, 
      congr, rw ‚Üê group.inv_eq_of_mul_eq_one hx,
      exact group.inv_inv _,
    end .. 
    quotient.mk (normal.ùíæ (@le_top _ _ (‚ä• : subgroup G)) (is_conj_mem_bot' _)) }

def top_div_bot_iso' : 
  G ‚âÖ (‚ä§ : subgroup G) /‚Çò (normal.ùíæ 
    (@le_top _ _ (‚ä• : subgroup G)) (is_conj_mem_bot' _)) := 
  group_hom.iso_comp to_top_iso top_div_bot_iso

def trivial_chain (h : is_simple G) : chain G := 
{ carrier := [‚ä•, ‚ä§],
  nonempty := by simp,
  chain_prop := 
    begin
      simp only [and_true, is_simple_def, list.chain'_singleton,
                 bot_le, chain_prop_def, exists_prop_of_true, ne.def, 
                 list.chain'_cons, group.nontrivial_def],
      exact ‚ü®is_conj_mem_bot' _, is_simple_of_iso top_div_bot_iso' h‚ü©, 
    end,
  chain_head := by simp,
  chain_last := by simp }

-- example [fintype G] : ‚àÄ (n = fintype.card G), ‚àÉ c : chain G, true :=
-- begin
--   intro n, apply nat.strong_induction_on n,
--   rintros k hk‚ÇÅ rfl,
--   by_cases is_simple G,
--     sorry,
--     sorry
-- end

-- instance [fintype G] : inhabited $ chain G := ‚ü® sorry ‚ü©

end composition

end mygroup