import subgroup.torsion

open_locale classical

namespace mygroup

open mygroup mygroup.subgroup mygroup.quotient group_hom function set

/-- A group is nontrivial if and only if it top is not equal to its bot -/
def group.nontrivial (G : Type) [group G] : Prop := (‚ä• : subgroup G) ‚â† ‚ä§ 

@[simp] lemma group.nontrivial_def {G : Type} [group G] :
  group.nontrivial G ‚Üî (‚ä• : subgroup G) ‚â† ‚ä§ := iff.rfl

-- Some lemmas about pushing top and bot over isomorphisms
lemma subgroup.iso_bot_eq_bot {G H : Type} [group G] [group H] 
  (œÜ : G ‚âÖ H) : subgroup.map œÜ.1 (‚ä• : subgroup G) = (‚ä• : subgroup H) := 
begin
  ext, rw [mem_map, mem_bot_iff],
  split, 
    { rintro ‚ü®_, hx, rfl‚ü©,
      rw mem_bot_iff at hx,
      subst hx,
      exact map_one _ },
    { rintro rfl,
      exact ‚ü®1, mem_bot_iff.2 rfl, map_one _‚ü© }
end

/-- Everything is a member of top -/
lemma subgroup.mem_top {G : Type} [group G] (g : G) : g ‚àà (‚ä§ : subgroup G) :=
begin
  change g ‚àà ((‚ä§ : subgroup G) : set G),
  rw ‚Üê singleton_subset_iff,
  change {g} ‚â§ ((‚ä§ : subgroup G) : set G),
  rw ‚Üê subgroup.closure_le, simp,
end

lemma subgroup.iso_top_eq_top {G H : Type} [group G] [group H] 
  (œÜ : G ‚âÖ H) : subgroup.map œÜ.1 (‚ä§ : subgroup G) = (‚ä§ : subgroup H) := 
begin
  ext, split; intro,
    { exact subgroup.mem_top _ },
    { rw mem_map,
      rcases œÜ.2.2 x with ‚ü®x, rfl‚ü©,
      refine ‚ü®x, subgroup.mem_top _, rfl‚ü© }
end

/-- Nontrivial is a group property, that is it translates over group isomorphisms -/
lemma subgroup.nontrivial_of_iso_nontrivial {G H : Type} [group G] [group H] 
  (œÜ : G ‚âÖ H) : group.nontrivial G ‚Üí group.nontrivial H :=
begin
  intros hG h,
  apply hG, 
  rw [‚Üê subgroup.iso_top_eq_top (iso_symm œÜ),
      ‚Üê subgroup.iso_bot_eq_bot (iso_symm œÜ), h],
end

namespace normal

variables {G : Type} [group G]

-- def subgroup.le_hom {A B : subgroup G} (hAB : A ‚â§ B) : A ‚Üí* B :=
--   monoid_hom.mk' (Œª a, ‚ü®a.1, hAB a.2‚ü©) (Œª _ _, rfl)

-- def subgroup.normal_pair {A B : subgroup G} (hAB : A ‚â§ B) : Prop :=
--   (monoid_hom.range (subgroup.le_hom hAB)).normal

-- @[simp] lemma subgroup.normal_pair_def {A B : subgroup G} (hAB : A ‚â§ B) :
--   subgroup.normal_pair hAB ‚Üî (monoid_hom.range (subgroup.le_hom hAB)).normal := iff.rfl

-- def subgroup.normal_pair' (A B : subgroup G): Prop :=
--   (monoid_hom.range (subgroup.le_hom (show A ‚äì B ‚â§ B, by exact inf_le_right))).normal

-- instance : has_top $ normal G := 
-- ‚ü® { carrier := univ,
--     one_mem' := mem_univ _,
--     mul_mem' := Œª _ _ _ _, mem_univ _,
--     inv_mem' := Œª _ _, mem_univ _,
--     conj_mem' := Œª _ _ _, mem_univ _ } ‚ü©

/-- The normal subgroup of a normal subgroup induced by a smaller normal 
  subgroup through the inclusion map -/
def normal.ùíæ {G : Type} [group G] {A B : normal G} (hle : A ‚â§ B) : normal B :=
{ carrier := { b | b.1 ‚àà A },
  one_mem' := A.one_mem',
  mul_mem' := Œª _ _ ha hb, A.mul_mem' ha hb,
  inv_mem' := Œª _ h, A.inv_mem' h,
  conj_mem' := Œª _ h _, A.conj_mem' _ h _ }

lemma normal.mem_ùíæ {G : Type} [group G] {A B : normal G} (hle : A ‚â§ B) 
  {g : G} (hg : g ‚àà B) : (‚ü®g, hg‚ü© : B) ‚àà normal.ùíæ hle ‚Üî g ‚àà A := iff.rfl

lemma normal.inv_ùíæ {G : Type} [group G] {A B : normal G} (hle : A ‚â§ B) 
  {g : G} (hg : g ‚àà B) : (‚ü®g, hg‚ü©‚Åª¬π : B) = ‚ü®g‚Åª¬π, B.inv_mem' hg‚ü© := rfl

lemma normal.mul_ùíæ {G : Type} [group G] {A B : normal G} (hle : A ‚â§ B) 
  {g h : G} (hg : g ‚àà B) (hh : h ‚àà B) : 
  (‚ü®g, hg‚ü© : B) * (‚ü®h, hh‚ü© : B) = ‚ü®g * h, B.mul_mem' hg hh‚ü© := rfl

attribute [simp] normal.mem_ùíæ normal.inv_ùíæ normal.mul_ùíæ

variables (H : subgroup G) (N : normal G)

/-- A group is simple if and only if it is nontrivial and all its normal subgroups 
  are either top or bot -/
def is_simple (G : Type) [group G] :=
  group.nontrivial G ‚àß ‚àÄ N : normal G, N = ‚ä• ‚à® N = ‚ä§

@[simp] lemma is_simple_def (G : Type) [group G] : is_simple G ‚Üî 
  group.nontrivial G ‚àß ‚àÄ N : normal G, N = ‚ä• ‚à® N = ‚ä§ := iff.rfl

def chain_prop (A B : normal G) : Prop :=
  ‚àÉ (hle : A ‚â§ B), is_simple $ B /‚Çò (normal.ùíæ hle)

@[simp] lemma chain_prop_def {A B : normal G} :
  chain_prop A B ‚Üî 
  ‚àÉ (hle : A ‚â§ B), is_simple $ B /‚Çò (normal.ùíæ hle) := iff.rfl

instance normal.inhabited : inhabited $ normal G := ‚ü® ‚ä• ‚ü©

/-- Chain is a nonempty list of normal subgroups such that subsequent subgroups 
  satisfies `chain_prop`, and furthermore, it begins with bot and ends with top -/
structure chain (G : Type) [group G] :=
(carrier    : list (normal G))
(nonempty   : carrier ‚â† list.nil)
(chain_prop : carrier.chain' chain_prop)
(chain_head : carrier.head = ‚ä•)
(chain_last : carrier.last nonempty = ‚ä§)

/-- A normal subgroup is maximal if and only if the quotient group by it is 
  simple -/
def is_maximal {N : normal G} (hN : N ‚â† ‚ä§) : Prop := is_simple (G /‚Çò N)

@[simp] lemma is_maximal_def {N : normal G} (hN : N ‚â† ‚ä§) : 
  is_maximal hN ‚Üî is_simple (G /‚Çò N) := iff.rfl

-- If N < M, then by the correspondence theorem, there is a proper normal 
-- subgroup in G / N which contradicts the is_simple hypothesis

/-- There is no proper subgroup containing a maximal subgroup -/
theorem maximal_is_max {N : normal G} (hproper : N ‚â† ‚ä§) (h : is_maximal hproper) : 
  ‚àÄ M : normal G, N < M ‚Üí M = ‚ä§ :=
begin
  intros M hM,
  rw [is_maximal_def, is_simple_def] at h,
  rcases h with ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©,
  cases h‚ÇÇ ((normal_of_quotient_order_iso N).to_equiv ‚ü®M, le_of_lt hM‚ü©),
    { exfalso, refine not_le_of_lt hM _,
      change (‚ü®M, le_of_lt hM‚ü© : { H // N ‚â§ H }) ‚â§ ‚ü®N, le_refl _‚ü©, 
      rw [(normal_of_quotient_order_iso N).ord', h],
      exact bot_le },
    { rw eq_top_iff,
      change (‚ü®‚ä§, le_top‚ü© : { H // N ‚â§ H }) ‚â§ ‚ü®M, le_of_lt hM‚ü©, 
      rw [(normal_of_quotient_order_iso N).ord', h],
      exact le_top }
end

/-- An alternative version of `maximal_is_max` that requires `‚â§` instead of `<` -/
theorem maximal_is_max' {N : normal G} (hproper : N ‚â† ‚ä§) (h : is_maximal hproper) : 
  ‚àÄ M : normal G, N ‚â§ M ‚Üí M = N ‚à® M = ‚ä§ := 
begin
  intros M hM,
  rcases le_iff_lt_or_eq.1 hM with hlt | rfl,
    { exact or.inr (maximal_is_max hproper h _ hlt) },
    { exact or.inl rfl }
end

/-- Everything is in top -/
lemma mem_top {G : Type} [group G] (g : G) : g ‚àà (‚ä§ : normal G) :=
begin
  rw [‚Üê mem_carrier, ‚Üê singleton_subset_iff],
  change {g} ‚â§ ((‚ä§ : normal G) : set G),
  rw ‚Üê normal.closure_le, simp,
end

def top_div_bot_iso : 
  G ‚âÖ (‚ä§ : normal G) /‚Çò (@normal.ùíæ _ _ ‚ä• (‚ä§ : normal G) le_top) :=
{ to_fun := Œª g, quotient.mk (@normal.ùíæ _ _ ‚ä• (‚ä§ : normal G) le_top) 
    (‚ü®g, mem_top _‚ü© : (‚ä§ : normal G)),
  map_mul' := by tidy,
  is_bijective := 
    begin
      refine ‚ü®_, by tidy‚ü©,
      intros x‚ÇÅ x‚ÇÇ hx, dsimp at hx,
      rw [‚Üê coe_eq_mk, ‚Üê coe_eq_mk, mk_eq'] at hx,
      rw @normal.inv_ùíæ _ _ (‚ä• : normal G) _ bot_le at hx,
      erw @normal.mul_ùíæ _ _ (‚ä• : normal G) _ bot_le at hx,
      erw [normal.mem_ùíæ, mem_bot_iff] at hx,
      rw ‚Üê group.inv_eq_of_mul_eq_one hx,
      exact group.inv_inv _,
    end }

def to_top : G ‚Üí* (‚ä§ : normal G) := ‚ü®Œª g, ‚ü®g, mem_top _‚ü©, by tidy‚ü©
def to_top_iso : G ‚âÖ (‚ä§ : normal G) := ‚ü®to_top, by tidy‚ü©

def trivial_chain (h : is_simple G) : chain G := 
{ carrier := [‚ä•, ‚ä§],
  nonempty := by simp,
  chain_prop := 
    begin
      simp, 
      refine ‚ü®subgroup.nontrivial_of_iso_nontrivial (top_div_bot_iso) h.1, Œª N, _‚ü©,
      rcases h with ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©,
      cases h‚ÇÇ (comap to_top_iso.1 (normal.comap (quotient.mk _) N)) with h h,
        { left, rw eq_bot_iff at h ‚ä¢,
          intros x hx,
          rcases exists_mk x with ‚ü®y, rfl‚ü©,
          rcases to_top_iso.2.2 y with ‚ü®x, rfl‚ü©,
          erw [mem_bot_iff, ‚Üê coe_one, mk_eq', group.one_inv, group.one_mul],
          change to_top_iso.1 x ‚àà _,
          rw ‚Üê mem_comap, convert one_mem _, rw ‚Üê mem_bot_iff,
          apply h, erw [mem_comap, mem_comap], exact hx },
        { right, rw eq_top_iff at h ‚ä¢,
          intros x hx,
          rcases exists_mk x with ‚ü®y, rfl‚ü©,
          rcases to_top_iso.2.2 y with ‚ü®x, rfl‚ü©,
          erw [coe_eq_mk, ‚Üê mem_comap, ‚Üê mem_comap],
          refine h (mem_top _) }
    end,
  chain_head := by simp,
  chain_last := by simp }

-- example [fintype G] : ‚àÄ (n = fintype.card G), ‚àÉ c : chain G, true :=
-- begin
--   intro n, apply nat.strong_induction_on n,
--   rintros k hk‚ÇÅ rfl,
--   by_cases is_simple G,
--     sorry,
--     sorry
-- end

-- instance [fintype G] : inhabited $ chain G := ‚ü® sorry ‚ü©

end normal

end mygroup